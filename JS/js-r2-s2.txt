Javascript Round 2 - SET 2-Solutions


1)Difference between let, var and const



Difference between let, var and const:var: declares a variable that is accessible within the whole function scope (or global scope if declared outside of any function). var variables can be re-declared and updated within their scope.
let: declares a variable that is accessible within the block scope, and can't be accessed outside of the block it was declared. let variables can also be re-declared within the same block but can't be updated within the same scope.
const: declares a constant variable that can't be re-assigned or updated within its scope. The value of a const variable must be assigned during declaration.


let a = 10

var b = 20

const c = 30



2) Hosting, callbacks, ES6 features



Hosting, callbacks, ES6 features:Hosting: is a mechanism in JavaScript where variables and functions are moved to the top of their scope before code execution. In other words, variables and functions are declared before they are used.
Callbacks: are functions passed as arguments to other functions to be executed at a later time. Callbacks allow us to run code after an asynchronous operation is completed.
ES6 features: refers to the latest version of JavaScript (ECMAScript 6 or ES6) introduced in 2015, which brings new syntax, features and improvements to the language. Some of the popular ES6 features include: arrow functions, template literals, destructuring, spread operator, classes, modules, etc.


console.log(hostedVar); // undefined

var hostedVar = "I am hosted";



function doSomething(callback) {

 console.log("Doing something");

 callback();

}



doSomething(function () {

 console.log("Callback called");

});



const arrowFn = (a, b) => a + b;

console.log(arrowFn(2, 3)); // 5



const obj = { name: "viru", age: 23};

const { name, age } = obj;

console.log(name); // viru

console.log(age); // 23







3) Difference between array.map and array.filter



array.map: is used to create a new array by applying a function to each element in the original array. The function provided as an argument to map is called for each element in the array and the returned value is used to form the new array.



const numbers = [1, 2, 3, 4];

const doubled = numbers.map(num => num * 2);

console.log(doubled); // [2, 4, 6, 8]





array.filter: is used to create a new array with all elements that pass the test implemented by the provided function. The function provided as an argument to filter is called for each element in the array, and if the function returns true for an element, it will be included in the new array.



const numbers = [1, 2, 3, 4];

const even = numbers.filter(num => num % 2 === 0);

console.log(even); // [2, 4]



In summary, array.map is used to transform the elements of an array into a new array, while array.filter is used to create a new array with only elements that pass a test.





4) How to find the length of an object



The length of an object in JavaScript cannot be determined in the same way as an array, because objects do not have a length property like arrays. To find the number of properties in an object, you can use the Object.keys method.



const person = { name: "viru", age: 23, job: "Developer" };

const numProperties = Object.keys(person).length;

console.log(numProperties); // 3





5) What are promises? 3 states of promises.



A Promise is an object representing the eventual completion or failure of an asynchronous operation. A Promise object can be in one of three states:

Pending: Initial state, neither fulfilled nor rejected.
Fulfilled: Meaning that the operation completed successfully.
Rejected: Meaning that the operation failed.




const promise = new Promise((resolve, reject) => {

 setTimeout(() => {

  resolve("Promise resolved!");

 }, 1000);

});



promise.then(result => console.log(result)); // Promise resolved! (after 1 second)





6) Why do we use promises over callbacks and why use await and async?



Promises provide a more organized and easier to maintain alternative to callback-based code for handling asynchronous operations. 

Callbacks can become hard to manage when dealing with complex asynchronous code, especially when chaining multiple asynchronous operations together, which can result in callback hell. 



Promises make it possible to write asynchronous code that is easy to read, understand and maintain, by using .then and .catch methods instead of passing around callbacks.



await and async are two keywords in JavaScript that are used to write asynchronous code that looks like synchronous code.



 async is used before a function declaration to indicate that the function returns a Promise and can be awaited. 



await is used inside an async function to wait for a Promise to be resolved before continuing with the rest of the code.



async function fetchData() {

 const response = await fetch("https://jsonplaceholder.typicode.com/posts");

 const data = await response.json();

 console.log(data);

}



fetchData();



