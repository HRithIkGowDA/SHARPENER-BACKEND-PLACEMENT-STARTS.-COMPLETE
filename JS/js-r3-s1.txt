Javascript Round 3 - SET 1-Solutions




1)When do we use async await ?



async/await is used to handle asynchronous operations in JavaScript. Asynchronous operations are operations that do not block the execution of the rest of the code, allowing for non-blocking and more efficient code. 



async/await provides a more readable and concise way to handle asynchronous operations compared to traditional methods like callbacks or Promises.





2)What is the reason behind writing await inside async function only?



The await keyword can only be used inside an async function. This is because await is used to wait for a promise to resolve and return its value, and promises can only be used with asynchronous operations.





3)

What will the output of this be?



async fun fun1(){

console.log('a');

console.log('b');

await setTimeout(() => console.log('c'), 1000)

await setTimeout(() => console.log('d'), 0)

console.log('e');

}

fun1()



Explain the reason behind the answer?



op-

a

b

e

d

c







4) can you solve thee above problem, so that we get proper outputs ?



using await





5) What are callback? What is Callback hell? Can you give an example of callback hell?



A callback is a function that is passed as an argument to another function and is executed after the outer function has completed

. 

Callback hell is a situation where the code is written in a nested manner with multiple callbacks, making the code difficult to read and debug.



An example of callback hell:



function doSomething(data, callback) {

 // do something with the data

 callback(data);

}



function doSomethingElse(data, callback) {

 // do something else with the data

 callback(data);

}



doSomething(data, function(data) {

 doSomethingElse(data, function(data) {

  // do something else with the data

  // ...

 });

});





6) How are promises more superior than callbacks? How do promises solve the issue of callback hell?



Promises are more superior than callbacks because they provide a more structured way of handling asynchronous operations. Promises help to avoid callback hell by allowing developers to keep their code organized and readable. 



Callback hell occurs when multiple nested callbacks are used to perform asynchronous operations. With promises, developers can chain multiple asynchronous operations together, which makes the code more readable and maintainable. 



Additionally, promises provide a way to handle errors that occurs during asynchronous operations, which helps to avoid unhandled errors.



